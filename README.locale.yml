texts:
  ja: Inalz
  en: __COPY__
---
texts:
  ja: Inalz は、 Markdown ドキュメントの翻訳をメンテナブルにするための i18n ツールです。
  en: __COPY__
---
texts:
  ja: Table of Contents
  en: __COPY__
---
texts:
  ja: "[Motivation](#motivation)"
  en: __COPY__
---
texts:
  ja: "[Markdown ファイルをコピーして翻訳するときの問題点](#markdown-ファイルをコピーして翻訳するときの問題点)"
  en: __COPY__
---
texts:
  ja: "[翻訳ドキュメントの更新が難しい](#翻訳ドキュメントの更新が難しい)"
  en: __COPY__
---
texts:
  ja: "[ドキュメントに無用の重複が生じる](#ドキュメントに無用の重複が生じる)"
  en: __COPY__
---
texts:
  ja: "[元の文と翻訳文の比較が難しい](#元の文と翻訳文の比較が難しい)"
  en: __COPY__
---
texts:
  ja: "[Inalz による解決](#inalz-による解決)"
  en: __COPY__
---
texts:
  ja: "[Guide](#guide)"
  en: __COPY__
---
texts:
  ja: "[インストール](#インストール)"
  en: __COPY__
---
texts:
  ja: "[最初の翻訳](#最初の翻訳)"
  en: __COPY__
---
texts:
  ja: "[ドキュメントの更新](#ドキュメントの更新)"
  en: __COPY__
---
texts:
  ja: "[API](#api)"
  en: __COPY__
---
texts:
  ja: "[inalz.yml ファイル](#inalzyml-ファイル)"
  en: __COPY__
---
texts:
  ja: "[inalz コマンド](#inalz-コマンド)"
  en: __COPY__
---
texts:
  ja: "[Locale ファイル](#locale-ファイル)"
  en: __COPY__
---
texts:
  ja: Motivation
  en: __COPY__
---
texts:
  ja: Markdown ファイルをコピーして翻訳するときの問題点
  en: __COPY__
---
texts:
  ja: Markdown ドキュメントを多言語対応するには、普通、言語ごとに Markdown ファイルを用意します。たとえば、`README.md` を元にして日本語の `README_ja.md`、中国語の `README_zh.md` を作成するといったやり方で、最初に書いたドキュメントを元にそれぞれの翻訳ドキュメントを作成します。ところが、このやり方で翻訳作業を進めると、次のような問題があります。
  en: __COPY__
---
texts:
  ja: 翻訳ドキュメントの更新が難しい
  en: __COPY__
---
texts:
  ja: ドキュメントに無用の重複が生じる
  en: __COPY__
---
texts:
  ja: 元の文と翻訳文の比較が難しい
  en: __COPY__
---
texts:
  ja: それぞれの問題点について少し説明します。
  en: __COPY__
---
texts:
  ja: 翻訳ドキュメントが古くなる問題はいろいろなライブラリのドキュメントで起きています。翻訳ドキュメントの内容が英語の最新版ドキュメントよりも古いバージョンのものになると、ドキュメントとして役に立たないだけでなく無用な誤解を生んでしまいます。翻訳ドキュメントを読んでいるうちに翻訳が古いバージョンのものあることに気がついて、原文を読まざるをえなくなり、結果的に余計遠回りになるといったことは、英語ネイティブでない人には誰でも経験があると思います。
  en: __COPY__
---
texts:
  ja: また、たいていは役割分担がなされていて、元言語のドキュメントを書く人とそれを翻訳する人は違っています。その場合、元ドキュメントを更新したら翻訳する人にそのことを伝えなくてはなりません。翻訳する人が更新箇所を知るには Git の差分を見ることになりますが、複数のコミットやプルリクエストにまたがってドキュメントが更新されていると、更新すべき文を探すのも一苦労です。
  en: __COPY__
---
texts:
  ja: 一般的に、プログラマは重複を嫌います。**DRY (Don't repeat yourself)** の原則が語っているように、無用の重複があると変更が困難になり、メンテナビリティが下がります。
  en: __COPY__
---
texts:
  ja: 翻訳ドキュメントを書く素朴な手順は、次のようなものでしょう。
  en: __COPY__
---
texts:
  ja: 元ドキュメント `README.md` をコピーして翻訳ドキュメント `README_ja.md` を作る
  en: __COPY__
---
texts:
  ja: 翻訳ドキュメント `README_ja.md` のテキストを翻訳文に一文ずつ置き換える
  en: __COPY__
---
texts:
  ja: これは DRY の原則に違反しています。このやり方では、ドキュメントに無用の重複が生じます。その一番大きなものがコードブロックです。ライブラリのドキュメントにはサンプルコードなどが書かれたコードブロックが多用されますが、ほとんどの場合、コードブロックは翻訳不要です。翻訳者はコードブロックには手を付けずに説明文だけを翻訳しますが、その結果、コードブロックは無用の重複として残ることになります。
  en: __COPY__
---
texts:
  ja: 想像してみましょう。元ドキュメント `README.md` のサンプルコードにタイポが紛れていることが発覚したら、`README.md`だけでなく、`README_ja.md` と `README_zh.md` それぞれのサンプルコードを修正して回らなくてはなりません。
  en: __COPY__
---
texts:
  ja: 翻訳ドキュメントが完成したとして、正しく翻訳できているかどうかを確認するにはどうすればいいでしょうか。翻訳ドキュメントと元ドキュメントの 2 ファイルをエディタで開いて並べ、見比べることになります。これでは効率よく翻訳の正しさをチェックできません。
  en: __COPY__
---
texts:
  ja: Inalz による解決
  en: __COPY__
---
texts:
  ja: 要約すると、以上の問題は翻訳ドキュメントのメンテナンスが難しいということです。それを解決する Inalz のアプローチは、元ドキュメントと翻訳ドキュメントの間に中間ファイルを用意するというものです。
  en: __COPY__
---
texts:
  ja: はじめに元ドキュメント `README.md` があります。そして、原文と翻訳文をマッピングするための中間ファイルが `README.locale.yml` で、Locale ファイルといいます。Locale ファイルは YAML で書かれ、シンプルに原文と翻訳文が一文ずつ並べられます。Locale ファイルで翻訳作業を行い、Locale ファイルから翻訳ドキュメント `README_ja.md` と `README_zh.md` を出力します。
  en: __COPY__
---
texts:
  ja: Locale ファイルの特徴は次のとおりです。
  en: __COPY__
---
texts:
  ja: 元ドキュメントが更新されると、対象の翻訳文に `outdated` のラベルが自動で付く
  en: __COPY__
---
texts:
  ja: そのため、更新すべき文がすぐにわかる
  en: __COPY__
---
texts:
  ja: コードブロックは翻訳対象とせず、Locale ファイルに含めない
  en: __COPY__
---
texts:
  ja: そのため、無用の重複を避けられる
  en: __COPY__
---
texts:
  ja: 原文と翻訳文が一文ずつ並ぶ
  en: __COPY__
---
texts:
  ja: そのため、翻訳作業と確認が容易である
  en: __COPY__
---
texts:
  ja: また、中間ファイルを置くことで、ドキュメント作成の役割分担が明確になります。
  en: __COPY__
---
texts:
  ja: 元ドキュメントを書く人は翻訳のことを気にせず Markdown で自由に書ける
  en: __COPY__
---
texts:
  ja: 翻訳する人は元ドキュメントの構造を気にせず一文ずつの翻訳に集中できる
  en: __COPY__
---
texts:
  ja: いわゆる**関心の分離**です。これが Inalz による解決です。
  en: __COPY__
---
texts:
  ja: Guide
  en: __COPY__
---
texts:
  ja: インストール
  en: __COPY__
---
texts:
  ja: 最初の翻訳
  en: __COPY__
---
texts:
  ja: ここで学ぶのは、2 つのコマンドです。
  en: __COPY__
---
texts:
  ja: "`inalz sync`"
  en: __COPY__
---
texts:
  ja: "`inalz build`"
  en: __COPY__
---
texts:
  ja: 概念図を示しておきます。
  en: __COPY__
---
texts:
  ja: "[example/helloworld](./example/helloworld) に例がありますが、最小限必要なのは次のファイルです。"
  en: __COPY__
---
texts:
  ja: "`README.md` ... 元ドキュメント。この例では簡単のため 1 つのファイルだけです"
  en: __COPY__
---
texts:
  ja: "`inalz.yml` ... Inalz の設定ファイル"
  en: __COPY__
---
texts:
  ja: "`README.md` の内容は以下です。"
  en: __COPY__
---
texts:
  ja: "`inalz.yml` の内容は以下です。"
  en: __COPY__
---
texts:
  ja: 設定ファイルの読み方を説明します。
  en: __COPY__
---
texts:
  ja: "`lang`: 言語の設定。ここでは、元ドキュメントが英語 (`en`)、翻訳ドキュメントが日本語 (`ja`) です"
  en: __COPY__
---
texts:
  ja: "`documents`: ドキュメントファイルのマッピング。ここでは、元ドキュメント `README.md` には Locale ファイル `README.locale.yml` が対応し、翻訳ドキュメント `README_ja.md` が出力されます"
  en: __COPY__
---
texts:
  ja: "`inalz.yml` はプロジェクトルートに置きます。設定ファイルは JSON もサポートしているので、`inalz.json` としても構いません。"
  en: __COPY__
---
texts:
  ja: "`example/helloworld/` ディレクトリに移動して、Inalz コマンドを実行しましょう。"
  en: __COPY__
---
texts:
  ja: すると、`README.locale.yml` ファイルが出力されます。
  en: __COPY__
---
texts:
  ja: "`inalz sync` コマンドは、`inalz.yml` の設定をもとに Locale ファイルを生成・同期します。ここで生成される Locale ファイルは `README.locale.yml` です。"
  en: __COPY__
---
texts:
  ja: "`inalz sync` コマンドは冪等です。つまり、元ドキュメントに変更がなければ、すでにある Locale ファイルは変更されません。"
  en: __COPY__
---
texts:
  ja: "`README.locale.yml` の内容は以下のようになるはずです。"
  en: __COPY__
---
texts:
  ja: Locale ファイルは、パラグラフ単位での文章の対応を表しています。デフォルトの `__COPY__` は、元の文章を置き換えずにそのまま使うことを意味しています。また、コードブロックは無視されます。
  en: __COPY__
---
texts:
  ja: "`README.locale.yml` の一部を編集してみましょう。"
  en: __COPY__
---
texts:
  ja: 翻訳作業が完了したので、翻訳ドキュメントファイルを出力します。もう一つの Inalz コマンドを実行しましょう。
  en: __COPY__
---
texts:
  ja: すると、翻訳ドキュメント `README_ja.md` が新たに出力されます。
  en: __COPY__
---
texts:
  ja: "`inalz build` コマンドは、Locale ファイルと元ドキュメントを参照して、翻訳ドキュメントを出力します。"
  en: __COPY__
---
texts:
  ja: "`README_ja.md` の内容は以下のようになるはずです。"
  en: __COPY__
---
texts:
  ja: 日本語訳 `README_ja.md` が完成しました！　翻訳ドキュメントは元ドキュメントの英文を単純に置換したものなので、 Markdown ドキュメント構造を保持しています。
  en: __COPY__
---
texts:
  ja: ドキュメントの更新
  en: __COPY__
---
texts:
  ja: では、ドキュメントのメンテナンスをしましょう。
  en: __COPY__
---
texts:
  ja: たとえば、`README.md` を次のように更新します。
  en: __COPY__
---
texts:
  ja: 差分を確認します。
  en: __COPY__
---
texts:
  ja: 既存のパラグラフが変更され、新たなパラグラフも追加されています。
  en: __COPY__
---
texts:
  ja: 元ドキュメントを更新したら、`inalz sync` コマンドで Locale ファイルに変更を反映します。
  en: __COPY__
---
texts:
  ja: "`README.locale.yml` は以下のようになるはずです。"
  en: __COPY__
---
texts:
  ja: 観察すると次のことがわかります。
  en: __COPY__
---
texts:
  ja: 更新されたパラグラフは `meta.outdated` が `true` になる
  en: __COPY__
---
texts:
  ja: 新しいパラグラフが追加される
  en: __COPY__
---
texts:
  ja: "`meta.outdated` は注釈です。`inalz build` には影響しませんが、そのパラグラフの翻訳が古くなっていることを教えてくれます。"
  en: __COPY__
---
texts:
  ja: 更新のための翻訳作業では、以下のことを行います。
  en: __COPY__
---
texts:
  ja: 更新されたパラグラフを翻訳し直し、`meta.outdated` を削除する
  en: __COPY__
---
texts:
  ja: 新しいパラグラフを翻訳する
  en: __COPY__
---
texts:
  ja: "`README.locale.yml` を以下のように更新します。"
  en: __COPY__
---
texts:
  ja: それから、翻訳ドキュメントを出力します。
  en: __COPY__
---
texts:
  ja: "`README_ja.md` は以下のようになるはずです。"
  en: __COPY__
---
texts:
  ja: このように、Locale ファイルを介してドキュメントを更新します。翻訳が古くなったパラグラフは Locale ファイルが教えてくれるので、ドキュメントのメンテナンスが容易です。
  en: __COPY__
---
texts:
  ja: API
  en: __COPY__
---
texts:
  ja: inalz.yml ファイル
  en: __COPY__
---
texts:
  ja: inalz.yml は設定ファイルで、言語やドキュメント同士のマッピングを設定します。
  en: __COPY__
---
texts:
  ja: 以下が inalz.yml の完全な例です。
  en: __COPY__
---
texts:
  ja: "`inalz` コマンド"
  en: __COPY__
---
texts:
  ja: 以下のコマンドは、設定ファイル `inalz.yml` があるディレクトリで実行します。
  en: __COPY__
---
texts:
  ja: "`inalz sync`: 設定ファイルを見て、元ドキュメントから Locale ファイルを同期します"
  en: __COPY__
---
texts:
  ja: "`inalz build`: Locale ファイルから翻訳ドキュメントを出力します"
  en: __COPY__
---
texts:
  ja: Locale ファイル
  en: __COPY__
---
texts:
  ja: "`inalz sync` コマンドによって生成される Locale ファイルは、1 つのファイルに複数の YAML ドキュメントが含まれます。各 YAML ドキュメントはセパレータ `---` で区切られていて、次のような形式です。"
  en: __COPY__
---
texts:
  ja: "`meta` フィールドはオプショナルで、 `inalz sync` によって自動生成されます。"
  en: __COPY__
---
texts:
  ja: "`meta.outdated` ラベルは原文が更新されると付与されます。翻訳文を更新し、`meta` フィールドを手動で削除してください。"
  en: __COPY__
---
texts:
  ja: "`meta.outdated` ラベルは原文が更新され、使われなくなったパラグラフに付与されます。不要であると判断したら、 YAML ドキュメントごと削除してください。"
  en: __COPY__
---
texts:
  ja: "`texts` フィールドは、原文・翻訳文を含めた Mapping です。"
  en: __COPY__
---
texts:
  ja: Mapping の key は、`inalz.yml` の `lang` フィールドによって規定されます。
  en: __COPY__
---
texts:
  ja: 翻訳作業では、翻訳言語の値を編集します。元言語の値を編集してはいけません。
  en: __COPY__
---
texts:
  ja: 翻訳言語の値が `__COPY__` であるとき、原文を置換せずにそのまま使用します。
  en: __COPY__
